platform :ios, '9.0'
#use_frameworks!
inhibit_all_warnings!

post_install do |installer|
    
    puts 'Determining pod project minimal deployment target'
    
    pods_project = installer.pods_project
    deployment_target_key = 'IPHONEOS_DEPLOYMENT_TARGET'
    deployment_targets = pods_project.build_configurations.map{ |config| config.build_settings[deployment_target_key] }
    minimal_deployment_target = deployment_targets.min_by{ |version| Gem::Version.new(version) }
    
    puts 'Minimal deployment target is ' + minimal_deployment_target
    puts 'Setting each pod deployment target to ' + minimal_deployment_target
    
    installer.pods_project.targets.each do |target|
        target.build_configurations.each do |config|
            config.build_settings[deployment_target_key] = minimal_deployment_target
        end
    end
end


target 'CJNetworkDemo' do
#  plugin 'cocoapods-hmap-prebuilt'
  
  pod 'CQDemoKit',          '~> 0.7.2',      :subspecs => ['BaseVC', 'Demo_Resource']
  
  # 模拟请求
  pod 'CJNetworkSimulate',  :path => '../'

  # 普通请求
  pod 'CQNetworkPublic',        :path => '../',     :subspecs => ['Request']
  pod 'CJNetwork',              :path => '../',     :subspecs => ['AFNetworkingSerializerEncrypt', 'AFNetworkingMethodEncrypt']
  pod 'CJNetworkClient',        :path => '../',     :subspecs => ['Request']

  # 上传请求
  pod 'CQNetworkPublic',        :path => '../',     :subspecs => ['Upload']
  pod 'CJNetwork',              :path => '../',     :subspecs => ['AFNetworkingUploadComponent']
  pod 'CJNetworkClient',        :path => '../',     :subspecs => ['Upload']
  pod 'CJNetworkFileModel',     :path => '../'
  
  # 其他
  pod 'CJNetwork',              :path => '../',     :subspecs => ['CJRequestUtil', 'CJCacheManager']
  
  pod 'CocoaAsyncSocket',       '~> 7.4.1'
  pod 'MJExtension'

  pod 'CJBaseUtil',     :subspecs => ['CJIndentedStringUtil']
  pod 'CJBaseHelper',   :subspecs => ['DeviceCJHelper', 'NSObjectCJHelper']

  pod 'CJMonitor'

  pod 'OpenUDID', '~> 1.0.0'
end

target 'CJNetworkDemoTests' do
    
end
